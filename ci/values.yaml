mode: daemonset
image:
  repository: 172597598159.dkr.ecr.us-east-1.amazonaws.com/otel-collector-contrib
  tag: ""
securityContext:
  runAsUser: 0
  runAsGroup: 0
resources:
  limits:
    cpu: 512m
    memory: 2Gi
useGOMEMLIMIT: true
presets:
  logsCollection:
    enabled: true
    includeCollectorLogs: true
    storeCheckpoints: false
  hostMetrics:
    enabled: true
  kubernetesAttributes:
    enabled: true
  kubernetesEvents:
    enabled: true
  kubeletMetrics:
    enabled: true
extraEnvs:
  - name: POD_IP
    valueFrom:
      fieldRef:
        fieldPath: status.podIP
  - name: OTEL_RESOURCE_ATTRIBUTES
    value: "k8s.pod.ip=$(POD_IP)"
  - name: DD_API_KEY
    valueFrom:
      secretKeyRef:
        name: datadog-secrets
        key: api-key
        optional: false
  - name: OTEL_K8S_NAMESPACE
    valueFrom:
      fieldRef:
        apiVersion: v1
        fieldPath: metadata.namespace
config:
  receivers:
    jaeger: null
    zipkin: null
    hostmetrics:
      scrapers:
        paging:
          metrics:
            system.paging.utilization:
              enabled: true
        cpu:
          metrics:
            system.cpu.utilization:
              enabled: true
        disk:
        load:
        memory:
        network:
        processes:
    otlp:
      protocols:
        grpc:
          endpoint: 0.0.0.0:4317
        http:
          endpoint: 0.0.0.0:4318
  exporters:
    # Disable debug exporter until we pull change that adds it from upstream
    debug: null
    logging:
      verbosity: detailed
    datadog:
      host_metadata:
        tags: ['env:${env:OTEL_K8S_NAMESPACE}']
      metrics:
        resource_attributes_as_tags: true
        histograms:
          mode: counters
          send_count_sum_metrics: true
      traces:
        span_name_as_resource_name: true
        compute_stats_by_span_kind: true
        peer_service_aggregation: true
        trace_buffer: 1000
      api:
        key: "$DD_API_KEY"
  processors:
    attributes:
      actions:
      - key: log.file.path
        pattern: \/var\/log\/pods\/${env:OTEL_K8S_NAMESPACE}_opentelemetry-demo-(?P<service_name>.*?)-.*
        action: extract
      - key: log.file.path
        pattern: \/var\/log\/pods\/${env:OTEL_K8S_NAMESPACE}_opentelemetry-demo-(?P<source>.*?)-.*
        action: extract
      - key: service
        from_attribute: service_name
        action: upsert
    attributes/kafkasrc:
      include:
        match_type: strict
        attributes:
          - key: "source"
            value: 'kafka'
      actions:
      # this makes sure the source for logs that come from kafka|frauddetectionservice|orderproducer is
      # set to kafka. The OOTB box kafka dashboard filters logs on source:kafka.
      - key: ddtags
        action: upsert
        value: "source:kafka"
    attributes/producer:
      include:
        match_type: strict
        attributes:
          - key: "source"
            value: 'orderproducer'
      actions:
      - key: ddtags
        action: upsert
        value: "source:kafka"
    attributes/consumer:
      include:
        match_type: strict
        attributes:
          - key: "source"
            value: 'frauddetectionservice'
      actions:
      - key: ddtags
        action: upsert
        value: "source:kafka"
    memory_limiter:
      check_interval: 1s
      limit_mib: 500
    resourcedetection:
      # ensures host.name and other important resource tags
      # get picked up
      detectors: [env, gcp, ecs, ec2, azure, system]
      timeout: 5s
      override: false
    # adds various tags related to k8s
    # adds various tags related to k8s
    k8sattributes:
      passthrough: false
      auth_type: "serviceAccount"
      pod_association:
        - sources:
            - from: resource_attribute
              name: k8s.pod.ip
      extract:
        metadata:
          - k8s.pod.name
          - k8s.pod.uid
          - k8s.deployment.name
          - k8s.node.name
          - k8s.namespace.name
          - k8s.pod.start_time
          - k8s.replicaset.name
          - k8s.replicaset.uid
          - k8s.daemonset.name
          - k8s.daemonset.uid
          - k8s.job.name
          - k8s.job.uid
          - k8s.cronjob.name
          - k8s.statefulset.name
          - k8s.statefulset.uid
          - container.image.name
          - container.image.tag
          - container.id
          - k8s.container.name
          - container.image.name
          - container.image.tag
          - container.id
        labels:
          - tag_name: kube_app_name
            key: app.kubernetes.io/name
            from: pod
          - tag_name: kube_app_instance
            key: app.kubernetes.io/instance
            from: pod
          - tag_name: kube_app_version
            key: app.kubernetes.io/version
            from: pod
          - tag_name: kube_app_component
            key: app.kubernetes.io/component
            from: pod
          - tag_name: kube_app_part_of
            key: app.kubernetes.io/part-of
            from: pod
          - tag_name: kube_app_managed_by
            key: app.kubernetes.io/managed-by
            from: pod
    batch:
      send_batch_max_size: 1000
      send_batch_size: 100
      timeout: 10s
  service:
    telemetry:
      logs:
        encoding: "json"
        initial_fields:
          - service: "otel-collector"
    pipelines:
      metrics:
        receivers: [otlp, hostmetrics, prometheus]
        processors: [resourcedetection, k8sattributes, batch]
        exporters: [datadog]
      traces:
        receivers: [otlp]
        processors: [resourcedetection, k8sattributes, batch]
        exporters: [datadog]
      logs:
        processors: [memory_limiter, resourcedetection, k8sattributes, batch, attributes, attributes/kafkasrc, attributes/producer, attributes/consumer]
        exporters: [datadog]
